package cn.allay.api.data;

import cn.allay.api.identifier.Identifier;
import cn.allay.api.world.biome.BiomeType;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import lombok.Getter;
import org.jetbrains.annotations.Nullable;

import java.util.HashMap;

/**
 * Get from number id or identifier using {@link cn.allay.api.utils.VanillaBiomeIdUtils VanillaBiomeIdUtils}
 * <p>
 * Automatically generated by {@code cn.allay.codegen.VanillaBiomeIdEnumGen} <br>
 * Allay Project <p>
 *
 * @author daoge_cmd | Cool_Loong
 */
@Getter
public enum VanillaBiomeId implements BiomeType {
    OCEAN(new Identifier("minecraft:ocean"), 0, "OCEAN"),

    PLAINS(new Identifier("minecraft:plains"), 1, "PLAIN"),

    DESERT(new Identifier("minecraft:desert"), 2, "DESERT"),

    EXTREME_HILLS(new Identifier("minecraft:extreme_hills"), 3, "EXTREME_HILLS"),

    FOREST(new Identifier("minecraft:forest"), 4, "FOREST"),

    TAIGA(new Identifier("minecraft:taiga"), 5, "TAIGA"),

    SWAMPLAND(new Identifier("minecraft:swampland"), 6, "SWAMP"),

    RIVER(new Identifier("minecraft:river"), 7, "RIVER"),

    HELL(new Identifier("minecraft:hell"), 8, "HELL"),

    THE_END(new Identifier("minecraft:the_end"), 9, "THE_END"),

    LEGACY_FROZEN_OCEAN(new Identifier("minecraft:legacy_frozen_ocean"), 10, "OCEAN"),

    FROZEN_RIVER(new Identifier("minecraft:frozen_river"), 11, "RIVER"),

    ICE_PLAINS(new Identifier("minecraft:ice_plains"), 12, "ICE"),

    ICE_MOUNTAINS(new Identifier("minecraft:ice_mountains"), 13, "ICE"),

    MUSHROOM_ISLAND(new Identifier("minecraft:mushroom_island"), 14, "MUSHROOM_ISLAND"),

    MUSHROOM_ISLAND_SHORE(new Identifier("minecraft:mushroom_island_shore"), 15, "MUSHROOM_ISLAND"),

    BEACH(new Identifier("minecraft:beach"), 16, "BEACH"),

    DESERT_HILLS(new Identifier("minecraft:desert_hills"), 17, "DESERT"),

    FOREST_HILLS(new Identifier("minecraft:forest_hills"), 18, "FOREST"),

    TAIGA_HILLS(new Identifier("minecraft:taiga_hills"), 19, "TAIGA"),

    EXTREME_HILLS_EDGE(new Identifier("minecraft:extreme_hills_edge"), 20, "EXTREME_HILLS"),

    JUNGLE(new Identifier("minecraft:jungle"), 21, "JUNGLE"),

    JUNGLE_HILLS(new Identifier("minecraft:jungle_hills"), 22, "JUNGLE"),

    JUNGLE_EDGE(new Identifier("minecraft:jungle_edge"), 23, "JUNGLE"),

    DEEP_OCEAN(new Identifier("minecraft:deep_ocean"), 24, "OCEAN"),

    STONE_BEACH(new Identifier("minecraft:stone_beach"), 25, "STONE_BEACH"),

    COLD_BEACH(new Identifier("minecraft:cold_beach"), 26, "BEACH"),

    BIRCH_FOREST(new Identifier("minecraft:birch_forest"), 27, "FOREST"),

    BIRCH_FOREST_HILLS(new Identifier("minecraft:birch_forest_hills"), 28, "FOREST"),

    ROOFED_FOREST(new Identifier("minecraft:roofed_forest"), 29, "FOREST"),

    COLD_TAIGA(new Identifier("minecraft:cold_taiga"), 30, "TAIGA"),

    COLD_TAIGA_HILLS(new Identifier("minecraft:cold_taiga_hills"), 31, "TAIGA"),

    MEGA_TAIGA(new Identifier("minecraft:mega_taiga"), 32, "TAIGA"),

    MEGA_TAIGA_HILLS(new Identifier("minecraft:mega_taiga_hills"), 33, "TAIGA"),

    EXTREME_HILLS_PLUS_TREES(new Identifier("minecraft:extreme_hills_plus_trees"), 34, "EXTREME_HILLS"),

    SAVANNA(new Identifier("minecraft:savanna"), 35, "SAVANNA"),

    SAVANNA_PLATEAU(new Identifier("minecraft:savanna_plateau"), 36, "SAVANNA"),

    MESA(new Identifier("minecraft:mesa"), 37, "MESA"),

    MESA_PLATEAU_STONE(new Identifier("minecraft:mesa_plateau_stone"), 38, "MESA"),

    MESA_PLATEAU(new Identifier("minecraft:mesa_plateau"), 39, "MESA"),

    WARM_OCEAN(new Identifier("minecraft:warm_ocean"), 40, "OCEAN"),

    DEEP_WARM_OCEAN(new Identifier("minecraft:deep_warm_ocean"), 41, "OCEAN"),

    LUKEWARM_OCEAN(new Identifier("minecraft:lukewarm_ocean"), 42, "OCEAN"),

    DEEP_LUKEWARM_OCEAN(new Identifier("minecraft:deep_lukewarm_ocean"), 43, "OCEAN"),

    COLD_OCEAN(new Identifier("minecraft:cold_ocean"), 44, "OCEAN"),

    DEEP_COLD_OCEAN(new Identifier("minecraft:deep_cold_ocean"), 45, "OCEAN"),

    FROZEN_OCEAN(new Identifier("minecraft:frozen_ocean"), 46, "OCEAN"),

    DEEP_FROZEN_OCEAN(new Identifier("minecraft:deep_frozen_ocean"), 47, "OCEAN"),

    BAMBOO_JUNGLE(new Identifier("minecraft:bamboo_jungle"), 48, "JUNGLE"),

    BAMBOO_JUNGLE_HILLS(new Identifier("minecraft:bamboo_jungle_hills"), 49, "JUNGLE"),

    SUNFLOWER_PLAINS(new Identifier("minecraft:sunflower_plains"), 129, "PLAIN"),

    DESERT_MUTATED(new Identifier("minecraft:desert_mutated"), 130, "DESERT"),

    EXTREME_HILLS_MUTATED(new Identifier("minecraft:extreme_hills_mutated"), 131, "EXTREME_HILLS"),

    FLOWER_FOREST(new Identifier("minecraft:flower_forest"), 132, "FOREST"),

    TAIGA_MUTATED(new Identifier("minecraft:taiga_mutated"), 133, "TAIGA"),

    SWAMPLAND_MUTATED(new Identifier("minecraft:swampland_mutated"), 134, "SWAMP"),

    ICE_PLAINS_SPIKES(new Identifier("minecraft:ice_plains_spikes"), 140, "ICE"),

    JUNGLE_MUTATED(new Identifier("minecraft:jungle_mutated"), 149, "JUNGLE"),

    JUNGLE_EDGE_MUTATED(new Identifier("minecraft:jungle_edge_mutated"), 151, "JUNGLE"),

    BIRCH_FOREST_MUTATED(new Identifier("minecraft:birch_forest_mutated"), 155, "FOREST"),

    BIRCH_FOREST_HILLS_MUTATED(new Identifier("minecraft:birch_forest_hills_mutated"), 156, "FOREST"),

    ROOFED_FOREST_MUTATED(new Identifier("minecraft:roofed_forest_mutated"), 157, "FOREST"),

    COLD_TAIGA_MUTATED(new Identifier("minecraft:cold_taiga_mutated"), 158, "TAIGA"),

    REDWOOD_TAIGA_MUTATED(new Identifier("minecraft:redwood_taiga_mutated"), 160, "TAIGA"),

    REDWOOD_TAIGA_HILLS_MUTATED(new Identifier("minecraft:redwood_taiga_hills_mutated"), 161, "TAIGA"),

    EXTREME_HILLS_PLUS_TREES_MUTATED(new Identifier("minecraft:extreme_hills_plus_trees_mutated"), 162, "EXTREME_HILLS"),

    SAVANNA_MUTATED(new Identifier("minecraft:savanna_mutated"), 163, "SAVANNA"),

    SAVANNA_PLATEAU_MUTATED(new Identifier("minecraft:savanna_plateau_mutated"), 164, "SAVANNA"),

    MESA_BRYCE(new Identifier("minecraft:mesa_bryce"), 165, "MESA"),

    MESA_PLATEAU_STONE_MUTATED(new Identifier("minecraft:mesa_plateau_stone_mutated"), 166, "MESA"),

    MESA_PLATEAU_MUTATED(new Identifier("minecraft:mesa_plateau_mutated"), 167, "MESA"),

    SOULSAND_VALLEY(new Identifier("minecraft:soulsand_valley"), 178, "DataDriven"),

    CRIMSON_FOREST(new Identifier("minecraft:crimson_forest"), 179, "DataDriven"),

    WARPED_FOREST(new Identifier("minecraft:warped_forest"), 180, "DataDriven"),

    BASALT_DELTAS(new Identifier("minecraft:basalt_deltas"), 181, "DataDriven"),

    JAGGED_PEAKS(new Identifier("minecraft:jagged_peaks"), 182, "DataDriven"),

    FROZEN_PEAKS(new Identifier("minecraft:frozen_peaks"), 183, "DataDriven"),

    SNOWY_SLOPES(new Identifier("minecraft:snowy_slopes"), 184, "DataDriven"),

    GROVE(new Identifier("minecraft:grove"), 185, "DataDriven"),

    MEADOW(new Identifier("minecraft:meadow"), 186, "DataDriven"),

    LUSH_CAVES(new Identifier("minecraft:lush_caves"), 187, "DataDriven"),

    DRIPSTONE_CAVES(new Identifier("minecraft:dripstone_caves"), 188, "DataDriven"),

    STONY_PEAKS(new Identifier("minecraft:stony_peaks"), 189, "DataDriven"),

    DEEP_DARK(new Identifier("minecraft:deep_dark"), 190, "DataDriven"),

    MANGROVE_SWAMP(new Identifier("minecraft:mangrove_swamp"), 191, "DataDriven"),

    CHERRY_GROVE(new Identifier("minecraft:cherry_grove"), 192, "DataDriven");

    private static final Int2ObjectOpenHashMap<VanillaBiomeId> MAP1;

    private static final HashMap<Identifier, VanillaBiomeId> MAP2;

    static {
        MAP1 = new Int2ObjectOpenHashMap<>();
        MAP2 = new HashMap<>();
        for (var b : values()) {
            MAP1.put(b.id, b);
            MAP2.put(b.identifier, b);
        }
    }

    private final Identifier identifier;

    private final int id;

    private final String type;

    VanillaBiomeId(Identifier identifier, int id, String type) {
        this.identifier = identifier;
        this.id = id;
        this.type = type;
    }

    @Nullable
    public static BiomeType fromId(int id) {
        return MAP1.get(id);
    }

    @Nullable
    public static BiomeType fromIdentifier(Identifier identifier) {
        return MAP2.get(identifier);
    }
}
