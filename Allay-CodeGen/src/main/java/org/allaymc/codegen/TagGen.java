package org.allaymc.codegen;

import com.google.gson.JsonParser;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Allay Project 2024/08/27
 *
 * @author IWareQ
 */
public class TagGen {
    public static void main(String[] args) {
        generate("Allay-API/src/main/java/org/allaymc/api/item/tag/ItemTags.java", ClassName.get("org.allaymc.api.item.tag", "ItemTag"), "unpacked/item_tags.json", "item_tags_custom.json");
        generate("Allay-API/src/main/java/org/allaymc/api/block/tag/BlockTags.java", ClassName.get("org.allaymc.api.block.tag", "BlockTag"), "unpacked/block_tags.json", "block_tags_custom.json");
    }

    public static void generate(String writeTo, ClassName tagClass, String... tagFiles) {
        var interfaceBuilder = TypeSpec.interfaceBuilder(tagClass.simpleName() + "s")
                .addJavadoc("Automatically generated by {@code org.allaymc.codegen.TagGen}")
                .addModifiers(Modifier.PUBLIC)
                .addField(
                        FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class), ClassName.get(String.class), tagClass), "NAME_TO_TAG")
                                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                                .initializer("new $T<>()", HashMap.class)
                                .build()
                );

        Set<String> keys = new HashSet<>();
        try {
            for (var file : tagFiles) {
                JsonParser.parseReader(Files.newBufferedReader(Path.of(CodeGen.DATA_PATH + file)))
                        .getAsJsonObject()
                        .entrySet()
                        .forEach(entry -> keys.add(entry.getKey()));
            }

            for (var key : keys) {
                var fieldName = key.split(":")[1].toUpperCase();
                interfaceBuilder.addField(
                        FieldSpec.builder(tagClass, fieldName)
                                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                                .initializer("create($S)", key)
                                .build()
                );
            }

            interfaceBuilder.addMethod(
                    MethodSpec.methodBuilder("create")
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                            .returns(tagClass)
                            .addParameter(String.class, "name")
                            .addStatement("var tag = new $T(name)", tagClass)
                            .addStatement("NAME_TO_TAG.put(name, tag)")
                            .addStatement("return tag")
                            .build()
            ).addMethod(
                    MethodSpec.methodBuilder("getTagByName")
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                            .returns(tagClass)
                            .addParameter(String.class, "name")
                            .addStatement("return NAME_TO_TAG.get(name)")
                            .build()
            );

            var javaFile = JavaFile.builder(tagClass.packageName(), interfaceBuilder.build())
                    .indent(Utils.INDENT)
                    .skipJavaLangImports(true)
                    .build();
            Files.writeString(Path.of(writeTo), javaFile.toString());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
