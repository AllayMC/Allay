package org.allaymc.codegen;

import com.google.gson.JsonParser;
import com.squareup.javapoet.*;
import lombok.SneakyThrows;
import org.allaymc.dependence.StringUtils;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.TreeMap;


/**
 * Allay Project 2023/5/13
 *
 * @author daoge_cmd
 */
public class VanillaItemIdEnumGen {
    public static final Map<String, Integer> ITEM_NAME_TO_ID = new TreeMap<>();
    public static final Path ITEM_DATA_FILE_PATH = Path.of(CodeGen.DATA_PATH + "items.json");
    private static final ClassName VANILLA_ITEM_ID_CLASS = ClassName.get("org.allaymc.api.data", "VanillaItemId");
    private static final ClassName IDENTIFIER_CLASS = ClassName.get("org.allaymc.api.utils", "Identifier");
    private static final ClassName STRING_CLASS = ClassName.get("java.lang", "String");
    private static final ClassName GETTER_CLASS = ClassName.get("lombok", "Getter");
    private static final String JAVA_DOC = """
            Automatically generated by {@code org.allaymc.codegen.VanillaItemIdEnumGen} <br>
            Allay Project <p>
            @author daoge_cmd | Cool_Loong
            """;
    private static final String PACKAGE_NAME = "org.allaymc.api.data";

    static {
        try {
            var reader = new InputStreamReader(Files.newInputStream(ITEM_DATA_FILE_PATH));
            JsonParser.parseReader(reader).getAsJsonObject().entrySet().forEach(entry -> {
                ITEM_NAME_TO_ID.put(entry.getKey(), entry.getValue().getAsJsonObject().get("id").getAsInt());
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        generate();
    }

    @SneakyThrows
    public static void generate() {
        generateToDependenceModule();
        generateToAPIModule();
    }

    @SneakyThrows
    public static void generateToDependenceModule() {
        var identifierClass = ClassName.get("org.allaymc.dependence", "Identifier");
        TypeSpec.Builder codeBuilder = commonBuilder(identifierClass);
        addEnums(codeBuilder);
        var javaFile = JavaFile.builder("org.allaymc.dependence", codeBuilder.build()).build();
        Files.writeString(Path.of("Allay-CodeGen/src/main/java/org/allaymc/dependence/VanillaItemId.java"), javaFile.toString());
    }

    @SneakyThrows
    public static void generateToAPIModule() {
        var itemTypeRegistryClass = ClassName.get("org.allaymc.api.item.registry", "ItemTypeRegistry");
        var itemTypeClass = ClassName.get("org.allaymc.api.item.type", "ItemType");
        TypeSpec.Builder codeBuilder = commonBuilder(IDENTIFIER_CLASS).addMethod(MethodSpec.methodBuilder("getItemType")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return $T.getRegistry().get(this.getIdentifier())", itemTypeRegistryClass)
                .returns(itemTypeClass)
                .build()
        );
        codeBuilder.addMethod(MethodSpec.methodBuilder("fromIdentifier")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addParameter(IDENTIFIER_CLASS, "identifier")
                .addCode("""
                        try{
                            return valueOf(identifier.path().replace(".", "_").toUpperCase(java.util.Locale.ENGLISH));
                        }catch(IllegalArgumentException ignore){
                            return null;
                        }""")
                .returns(VANILLA_ITEM_ID_CLASS)
                .build()
        );
        addEnums(codeBuilder);
        var javaFile = JavaFile.builder(PACKAGE_NAME, codeBuilder.build()).build();
        String result = javaFile.toString()
                .replace("public ItemType", "public ItemType<?>")
                .replace("org.allaymc.dependence.Identifier", "org.allaymc.api.utils.identifier.Identifier")
                .replace("org.allaymc.dependence.VanillaItemId", "org.allaymc.api.data.VanillaItemId");
        Files.writeString(Path.of("Allay-API/src/main/java/org/allaymc/api/data/VanillaItemId.java"), result);
    }

    private static void addEnums(TypeSpec.Builder codeBuilder) {
        for (var entry : ITEM_NAME_TO_ID.entrySet()) {
            var split = StringUtils.fastTwoPartSplit(
                    StringUtils.fastTwoPartSplit(entry.getKey(), ":", "")[1],
                    ".", "");
            var valueName = split[0].isBlank() ? split[1].toUpperCase() : split[0].toUpperCase() + "_" + split[1].toUpperCase();
            codeBuilder.addEnumConstant(valueName, TypeSpec.anonymousClassBuilder("$S, $L", entry.getKey(), entry.getValue()).build());
        }
    }

    private static TypeSpec.Builder commonBuilder(ClassName identifierClass) {
        return TypeSpec.enumBuilder("VanillaItemId")
                .addJavadoc(JAVA_DOC)
                .addModifiers(Modifier.PUBLIC)
                .addField(FieldSpec
                        .builder(identifierClass, "identifier", Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(GETTER_CLASS)
                        .build())
                .addField(FieldSpec
                        .builder(int.class, "runtimeId", Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(GETTER_CLASS)
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(STRING_CLASS, "identifier")
                        .addParameter(int.class, "runtimeId")
                        .addStatement("this.identifier = new $T(identifier)", identifierClass)
                        .addStatement("this.runtimeId = runtimeId")
                        .build()
                );
    }
}
