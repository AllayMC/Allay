package cn.allay.codegen;

import cn.allay.dependence.VanillaBiomeId;
import com.squareup.javapoet.*;
import lombok.SneakyThrows;

import javax.lang.model.element.Modifier;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Allay Project 2023/6/3
 *
 * @author daoge_cmd
 */
public class VanillaBiomeIdEnumGen {
    private static final ClassName STRING_CLASS = ClassName.get("java.lang", "String");
    private static final ClassName INTEGER_CLASS = ClassName.get("java.lang", "Integer");
    private static final ClassName GETTER_CLASS = ClassName.get("lombok", "Getter");
    private static final String JAVA_DOC = """
            Automatically generated by {@code cn.allay.codegen.VanillaBiomeIdEnumGen} <br>
            Allay Project <p>
            @author daoge_cmd
            """;

    public static void main(String[] args) {
        generate();
        generateTypes();
    }

    @SneakyThrows
    public static void generate() {
        TypeSpec.Builder codeBuilder = TypeSpec.enumBuilder("VanillaBiomeId")
                .addJavadoc(JAVA_DOC)
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(GETTER_CLASS)
                .addField(FieldSpec
                        .builder(STRING_CLASS, "name", Modifier.PRIVATE, Modifier.FINAL)
                        .build())
                .addField(FieldSpec
                        .builder(INTEGER_CLASS, "id", Modifier.PRIVATE, Modifier.FINAL)
                        .build())
                .addField(FieldSpec
                        .builder(STRING_CLASS, "type", Modifier.PRIVATE, Modifier.FINAL)
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(STRING_CLASS, "name")
                        .addParameter(INTEGER_CLASS, "id")
                        .addParameter(STRING_CLASS, "type")
                        .addStatement("this.name = name")
                        .addStatement("this.id = id")
                        .addStatement("this.type = type")
                        .build()
                );
        for (var entry : CodeGen.BIOME_DATA.entrySet()) {
            var name = entry.getKey();
            var id = entry.getValue().id;
            var type = entry.getValue().type;
            codeBuilder.addEnumConstant(name.toUpperCase(), TypeSpec.anonymousClassBuilder("$S, $L, $S", name, id, type).build());
        }

        var builtCode = codeBuilder.build();
        var javaFile = JavaFile.builder("cn.allay.api.data", builtCode).build();
        Files.writeString(Path.of("Allay-API/src/main/java/cn/allay/api/data/VanillaBiomeId.java"), javaFile.toString());
        var javaFile2 = JavaFile.builder("cn.allay.dependence", builtCode).build();
        Files.writeString(Path.of("Allay-CodeGen/src/main/java/cn/allay/dependence/VanillaBiomeId.java"), javaFile2.toString());
    }

    @SneakyThrows
    public static void generateTypes() {
        var biomeTypeClassName = ClassName.get("cn.allay.api.world.biome", "BiomeType");
        var vanillaBiomeIdEnumClassName = ClassName.get("cn.allay.api.data", "VanillaBiomeId");
        var codeBuilder = TypeSpec.interfaceBuilder("VanillaBiomeTypes")
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc(JAVA_DOC);
        for (var id : VanillaBiomeId.values()) {
            var constantName = id.getName().toUpperCase();
            codeBuilder.addField(
                    FieldSpec
                            .builder(biomeTypeClassName, constantName, Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer("BiomeType.create($T.$N)", vanillaBiomeIdEnumClassName, id.name())
                            .build());
        }

        var javaFile = JavaFile.builder("cn.allay.api.world.biome", codeBuilder.build()).build();
        Files.writeString(Path.of("Allay-API/src/main/java/cn/allay/api/world/biome/VanillaBiomeTypes.java"), javaFile.toString());
    }
}
