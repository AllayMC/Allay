package cn.allay.codegen;

import cn.allay.api.identifier.Identifier;
import com.squareup.javapoet.*;
import lombok.SneakyThrows;

import javax.lang.model.element.Modifier;
import java.nio.file.Files;
import java.nio.file.Path;

import static cn.allay.codegen.CodeGen.BLOCK_PALETTE_NBT;

/**
 * Author: daoge_cmd | Cool_Loong <br>
 * Date: 2023/3/26 <br>
 * Allay Project <br>
 */
public class VanillaBlockIdEnumGen {

    private static final Path FILE_OUTPUT_PATH = Path.of("Allay-API/src/main/java/cn/allay/api/data/VanillaBlockId.java");

    @SneakyThrows
    public static void generate() {
        var identifierClass = ClassName.get("cn.allay.api.identifier", "Identifier");
        var blockTypeRegistryClass = ClassName.get("cn.allay.api.block.type", "BlockTypeRegistry");
        var blockTypeClass = ClassName.get("cn.allay.api.block.type", "BlockType");
        var stringClass = ClassName.get("java.lang", "String");
        var getterClass = ClassName.get("lombok", "Getter");
        TypeSpec.Builder codeBuilder = TypeSpec.enumBuilder("VanillaBlockId")
                .addJavadoc(
                        "Author: daoge_cmd | Cool_Loong<br>\n" +
                                "Automatically generated by {@code cn.allay.codegen.VanillaBlockIdEnumGen} <br>\n" +
                                "Allay Project <br>\n")
                .addModifiers(Modifier.PUBLIC)
                .addField(FieldSpec
                        .builder(Identifier.class, "identifier", Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(getterClass)
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(stringClass, "identifier")
                        .addStatement("this.$N = new $T($N)", "identifier", identifierClass, "identifier")
                        .build()
                )
                .addMethod(MethodSpec.methodBuilder("getBlockType")
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return $T.getRegistry().get(this.getIdentifier())", blockTypeRegistryClass)
                        .returns(blockTypeClass)
                        .build()
                );
        var sortedidentifier = BLOCK_PALETTE_NBT.stream().map(block -> block.getString("name")).sorted(String::compareTo).map(Identifier::new).toList();
        for (var identifier : sortedidentifier) {
            codeBuilder
                    .addEnumConstant(identifier.getPath().toUpperCase(),
                            TypeSpec.anonymousClassBuilder("$S", identifier.toString()).build());
        }

        var javaFile = JavaFile.builder("cn.allay.api.data", codeBuilder.build()).build();
        Files.writeString(FILE_OUTPUT_PATH, javaFile.toString());
    }
}
