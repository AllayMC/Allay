package org.allaymc.codegen;

import com.google.gson.JsonParser;
import com.squareup.javapoet.*;
import lombok.SneakyThrows;
import org.allaymc.dependence.StringUtils;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;

import static org.allaymc.codegen.ClassNames.*;

/**
 * @author daoge_cmd | Cool_Loong | IWareQ
 */
public class ItemIdEnumGen {
    public static final Map<String, Integer> ITEM_NAME_TO_ID = new TreeMap<>();
    public static final Path ITEM_DATA_FILE_PATH = Path.of(CodeGenConstants.DATA_PATH + "items.json");
    private static final String PACKAGE_NAME = "org.allaymc.api.item.data";

    static {
        try {
            var reader = new InputStreamReader(Files.newInputStream(ITEM_DATA_FILE_PATH));
            JsonParser.parseReader(reader).getAsJsonObject().entrySet().forEach(entry -> {
                ITEM_NAME_TO_ID.put(entry.getKey(), entry.getValue().getAsJsonObject().get("id").getAsInt());
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        generate();
    }

    @SneakyThrows
    public static void generate() {
        generateToDependenceModule();
        generateToAPIModule();
    }

    @SneakyThrows
    public static void generateToDependenceModule() {
        TypeSpec.Builder codeBuilder = commonBuilder(DEP_IDENTIFIER);
        addEnums(codeBuilder);
        var javaFile = JavaFile.builder("org.allaymc.dependence", codeBuilder.build())
                .indent(CodeGenConstants.INDENT)
                .skipJavaLangImports(true)
                .build();
        Files.writeString(Path.of("codegen/src/main/java/org/allaymc/dependence/ItemId.java"), javaFile.toString());
    }

    @SneakyThrows
    public static void generateToAPIModule() {
        TypeSpec.Builder codeBuilder = commonBuilder(ClassNames.API_IDENTIFIER)
                .addAnnotation(MINECRAFT_VERSION_SENSITIVE)
                .addMethod(MethodSpec.methodBuilder("fromIdentifier")
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .addParameter(ClassNames.API_IDENTIFIER, "identifier")
                        .beginControlFlow("try")
                        .addStatement("return valueOf(identifier.path().replace(\".\", \"_\").toUpperCase($T.ENGLISH))", Locale.class)
                        .nextControlFlow("catch ($T ignore)", IllegalArgumentException.class)
                        .addStatement("return null")
                        .endControlFlow()
                        .returns(ClassNames.ITEM_ID)
                        .build()
                )
                .addMethod(MethodSpec.methodBuilder("getItemType")
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return $T.ITEMS.get(this.getIdentifier())", REGISTRIES)
                        .returns(ParameterizedTypeName.get(ITEM_TYPE, WildcardTypeName.subtypeOf(TypeName.OBJECT)))
                        .build()
                );
        addEnums(codeBuilder);
        var javaFile = JavaFile.builder(PACKAGE_NAME, codeBuilder.build())
                .indent(CodeGenConstants.INDENT)
                .skipJavaLangImports(true)
                .build();
        Files.writeString(Path.of("api/src/main/java/org/allaymc/api/item/data/ItemId.java"), javaFile.toString());
    }

    private static void addEnums(TypeSpec.Builder codeBuilder) {
        for (var entry : ITEM_NAME_TO_ID.entrySet()) {
            var split = StringUtils.fastTwoPartSplit(
                    StringUtils.fastTwoPartSplit(entry.getKey(), ":", "")[1],
                    ".", "");
            var valueName = split[0].isBlank() ? split[1].toUpperCase() : split[0].toUpperCase() + "_" + split[1].toUpperCase();
            codeBuilder.addEnumConstant(valueName, TypeSpec.anonymousClassBuilder("$S, $L", entry.getKey(), entry.getValue()).build());
        }
    }

    private static TypeSpec.Builder commonBuilder(ClassName identifierClass) {
        return TypeSpec.enumBuilder("ItemId")
                .addJavadoc("Automatically generated by {@code org.allaymc.codegen.ItemIdEnumGen}")
                .addModifiers(Modifier.PUBLIC)
                .addField(FieldSpec
                        .builder(identifierClass, "identifier", Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(ClassNames.GETTER)
                        .build())
                .addField(FieldSpec
                        .builder(int.class, "runtimeId", Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(ClassNames.GETTER)
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(ClassNames.STRING, "identifier")
                        .addParameter(int.class, "runtimeId")
                        .addStatement("this.identifier = new $T(identifier)", identifierClass)
                        .addStatement("this.runtimeId = runtimeId")
                        .build()
                );
    }
}
